import chalk from 'chalk';
import { Command } from 'commander';
import fs from 'fs-extra';
import inquirer from 'inquirer';
import ora from 'ora';

interface InitOptions {
  force?: boolean;
}

export const initCommand = new Command('init')
  .description('Initialize Penpot token configuration')
  .option('-f, --force', 'Overwrite existing configuration')
  .action(async (options: InitOptions) => {
    const spinner = ora('Initializing token configuration...').start();
    
    try {
      const configPath = '.env';
      const configExists = await fs.pathExists(configPath);
      
      if (configExists && !options.force) {
        spinner.stop();
        const { overwrite } = await inquirer.prompt([
          {
            type: 'confirm',
            name: 'overwrite',
            message: 'Configuration already exists. Overwrite?',
            default: false,
          },
        ]);
        
        if (!overwrite) {
          console.log(chalk.yellow('‚ö†Ô∏è Initialization cancelled'));
          return;
        }
        spinner.start();
      }
      
      spinner.text = 'Gathering configuration...';
      spinner.stop();
      
      const answers = await inquirer.prompt([
        {
          type: 'input',
          name: 'fileId',
          message: 'Enter your Penpot file ID:',
          validate: (input: string) => input.length > 0 || 'File ID is required',
        },
        {
          type: 'password',
          name: 'accessToken',
          message: 'Enter your Penpot access token:',
          validate: (input: string) => input.length > 0 || 'Access token is required',
        },
        {
          type: 'input',
          name: 'teamId',
          message: 'Enter your Penpot team ID (optional):',
        },
        {
          type: 'input',
          name: 'baseUrl',
          message: 'Enter Penpot base URL:',
          default: 'https://design.penpot.app',
        },
      ]);
      
      const configContent = `# Penpot Token Export Configuration
# Generated by mimic-tokens CLI

PENPOT_FILE_ID=${answers.fileId}
PENPOT_ACCESS_TOKEN=${answers.accessToken}
${answers.teamId ? `PENPOT_TEAM_ID=${answers.teamId}` : '# PENPOT_TEAM_ID=your-team-id-here'}
PENPOT_BASE_URL=${answers.baseUrl}

# Optional: Override output paths
# TOKENS_OUTPUT_DIR=packages/design-tokens/tokens
# TOKENS_BUILD_DIR=packages/design-tokens/libs
`;
      
      await fs.writeFile(configPath, configContent);
      
      // Create .env.example for reference
      const exampleContent = configContent.replace(
        /=.+$/gm,
        '=your-value-here'
      );
      await fs.writeFile('.env.example', exampleContent);
      
      console.log(chalk.green('‚úÖ Configuration initialized successfully!'));
      console.log(chalk.cyan('\nüìã Next steps:'));
      console.log('  1. Update your .env file with actual values');
      console.log('  2. Run: mimic-tokens status (to verify connection)');
      console.log('  3. Run: mimic-tokens sync (to export and build tokens)');
      console.log('  4. Run: mimic-tokens watch (for development)');
      
    } catch (error) {
      spinner.stop();
      console.error(chalk.red('‚ùå Failed to initialize configuration:'), error);
      process.exit(1);
    }
  });
